// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.24.4
// source: pkg/pb/service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogisticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	ResourcePool  map[string]int32       `protobuf:"bytes,2,rep,name=resource_pool,json=resourcePool,proto3" json:"resource_pool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TransitMatrix map[string]*TransitMap `protobuf:"bytes,3,rep,name=transit_matrix,json=transitMatrix,proto3" json:"transit_matrix,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objective     string                 `protobuf:"bytes,4,opt,name=objective,proto3" json:"objective,omitempty"`
	Vehicles      []string               `protobuf:"bytes,5,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogisticsRequest) Reset() {
	*x = LogisticsRequest{}
	mi := &file_pkg_pb_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogisticsRequest) ProtoMessage() {}

func (x *LogisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogisticsRequest.ProtoReflect.Descriptor instead.
func (*LogisticsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{0}
}

func (x *LogisticsRequest) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *LogisticsRequest) GetResourcePool() map[string]int32 {
	if x != nil {
		return x.ResourcePool
	}
	return nil
}

func (x *LogisticsRequest) GetTransitMatrix() map[string]*TransitMap {
	if x != nil {
		return x.TransitMatrix
	}
	return nil
}

func (x *LogisticsRequest) GetObjective() string {
	if x != nil {
		return x.Objective
	}
	return ""
}

func (x *LogisticsRequest) GetVehicles() []string {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

type Resource struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	MachineId      string                   `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	AvailableHours int32                    `protobuf:"varint,2,opt,name=available_hours,json=availableHours,proto3" json:"available_hours,omitempty"`
	Maintenance    []*timestamppb.Timestamp `protobuf:"bytes,3,rep,name=maintenance,proto3" json:"maintenance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_pkg_pb_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{1}
}

func (x *Resource) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *Resource) GetAvailableHours() int32 {
	if x != nil {
		return x.AvailableHours
	}
	return 0
}

func (x *Resource) GetMaintenance() []*timestamppb.Timestamp {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

type DemandForecast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     int32                  `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Quantity      int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DemandForecast) Reset() {
	*x = DemandForecast{}
	mi := &file_pkg_pb_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemandForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemandForecast) ProtoMessage() {}

func (x *DemandForecast) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemandForecast.ProtoReflect.Descriptor instead.
func (*DemandForecast) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{2}
}

func (x *DemandForecast) GetProductId() int32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *DemandForecast) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DemandForecast) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

type ProductCapacity struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MaxShifts      int32                  `protobuf:"varint,1,opt,name=max_shifts,json=maxShifts,proto3" json:"max_shifts,omitempty"`
	HoursPerShift  float32                `protobuf:"fixed32,2,opt,name=hours_per_shift,json=hoursPerShift,proto3" json:"hours_per_shift,omitempty"`
	DowntimeFactor float32                `protobuf:"fixed32,3,opt,name=downtime_factor,json=downtimeFactor,proto3" json:"downtime_factor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProductCapacity) Reset() {
	*x = ProductCapacity{}
	mi := &file_pkg_pb_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCapacity) ProtoMessage() {}

func (x *ProductCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCapacity.ProtoReflect.Descriptor instead.
func (*ProductCapacity) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{3}
}

func (x *ProductCapacity) GetMaxShifts() int32 {
	if x != nil {
		return x.MaxShifts
	}
	return 0
}

func (x *ProductCapacity) GetHoursPerShift() float32 {
	if x != nil {
		return x.HoursPerShift
	}
	return 0
}

func (x *ProductCapacity) GetDowntimeFactor() float32 {
	if x != nil {
		return x.DowntimeFactor
	}
	return 0
}

type ProductionPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Demand        []*DemandForecast      `protobuf:"bytes,1,rep,name=demand,proto3" json:"demand,omitempty"`
	Resources     []*Resource            `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	Capacity      *ProductCapacity       `protobuf:"bytes,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductionPlanRequest) Reset() {
	*x = ProductionPlanRequest{}
	mi := &file_pkg_pb_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductionPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionPlanRequest) ProtoMessage() {}

func (x *ProductionPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionPlanRequest.ProtoReflect.Descriptor instead.
func (*ProductionPlanRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{4}
}

func (x *ProductionPlanRequest) GetDemand() []*DemandForecast {
	if x != nil {
		return x.Demand
	}
	return nil
}

func (x *ProductionPlanRequest) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ProductionPlanRequest) GetCapacity() *ProductCapacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

type ProductSchedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Product       string                 `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Quantity      int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductSchedule) Reset() {
	*x = ProductSchedule{}
	mi := &file_pkg_pb_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchedule) ProtoMessage() {}

func (x *ProductSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchedule.ProtoReflect.Descriptor instead.
func (*ProductSchedule) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{5}
}

func (x *ProductSchedule) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *ProductSchedule) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ScheduleEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MachineId     string                 `protobuf:"bytes,1,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	Products      []*ProductSchedule     `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleEntry) Reset() {
	*x = ScheduleEntry{}
	mi := &file_pkg_pb_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleEntry) ProtoMessage() {}

func (x *ScheduleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleEntry.ProtoReflect.Descriptor instead.
func (*ScheduleEntry) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleEntry) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *ScheduleEntry) GetProducts() []*ProductSchedule {
	if x != nil {
		return x.Products
	}
	return nil
}

type MachineSchedule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schedules     []*ProductSchedule     `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineSchedule) Reset() {
	*x = MachineSchedule{}
	mi := &file_pkg_pb_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSchedule) ProtoMessage() {}

func (x *MachineSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSchedule.ProtoReflect.Descriptor instead.
func (*MachineSchedule) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{7}
}

func (x *MachineSchedule) GetSchedules() []*ProductSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type ProductionResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Schedule      map[string]*MachineSchedule `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Explanation   string                      `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductionResponse) Reset() {
	*x = ProductionResponse{}
	mi := &file_pkg_pb_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionResponse) ProtoMessage() {}

func (x *ProductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionResponse.ProtoReflect.Descriptor instead.
func (*ProductionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{8}
}

func (x *ProductionResponse) GetSchedule() map[string]*MachineSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ProductionResponse) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

type Task struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Duration          int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	EarliestStart     int32                  `protobuf:"varint,4,opt,name=earliest_start,json=earliestStart,proto3" json:"earliest_start,omitempty"`
	LatestEnd         int32                  `protobuf:"varint,5,opt,name=latest_end,json=latestEnd,proto3" json:"latest_end,omitempty"`
	Dependencies      []uint32               `protobuf:"varint,6,rep,packed,name=dependencies,proto3" json:"dependencies,omitempty"`
	ResourcesRequired map[string]int32       `protobuf:"bytes,7,rep,name=resources_required,json=resourcesRequired,proto3" json:"resources_required,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Location          string                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	CostPerHour       float32                `protobuf:"fixed32,9,opt,name=cost_per_hour,json=costPerHour,proto3" json:"cost_per_hour,omitempty"`
	Priority          int32                  `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_pkg_pb_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{9}
}

func (x *Task) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Task) GetEarliestStart() int32 {
	if x != nil {
		return x.EarliestStart
	}
	return 0
}

func (x *Task) GetLatestEnd() int32 {
	if x != nil {
		return x.LatestEnd
	}
	return 0
}

func (x *Task) GetDependencies() []uint32 {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Task) GetResourcesRequired() map[string]int32 {
	if x != nil {
		return x.ResourcesRequired
	}
	return nil
}

func (x *Task) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Task) GetCostPerHour() float32 {
	if x != nil {
		return x.CostPerHour
	}
	return 0
}

func (x *Task) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type TransitMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransitTimes  map[string]int32       `protobuf:"bytes,1,rep,name=transit_times,json=transitTimes,proto3" json:"transit_times,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransitMap) Reset() {
	*x = TransitMap{}
	mi := &file_pkg_pb_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransitMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitMap) ProtoMessage() {}

func (x *TransitMap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitMap.ProtoReflect.Descriptor instead.
func (*TransitMap) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{10}
}

func (x *TransitMap) GetTransitTimes() map[string]int32 {
	if x != nil {
		return x.TransitTimes
	}
	return nil
}

type ScheduleTask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Start         int32                  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Resources     map[string]int32       `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Vehicle       string                 `protobuf:"bytes,6,opt,name=vehicle,proto3" json:"vehicle,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleTask) Reset() {
	*x = ScheduleTask{}
	mi := &file_pkg_pb_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTask) ProtoMessage() {}

func (x *ScheduleTask) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTask.ProtoReflect.Descriptor instead.
func (*ScheduleTask) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{11}
}

func (x *ScheduleTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScheduleTask) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ScheduleTask) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ScheduleTask) GetResources() map[string]int32 {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ScheduleTask) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ScheduleTask) GetVehicle() string {
	if x != nil {
		return x.Vehicle
	}
	return ""
}

type ScheduleResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Schedule      map[string]*ScheduleTask `protobuf:"bytes,1,rep,name=schedule,proto3" json:"schedule,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Makespan      *int32                   `protobuf:"varint,2,opt,name=makespan,proto3,oneof" json:"makespan,omitempty"`
	TotalCost     *float32                 `protobuf:"fixed32,3,opt,name=total_cost,json=totalCost,proto3,oneof" json:"total_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleResponse) Reset() {
	*x = ScheduleResponse{}
	mi := &file_pkg_pb_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleResponse) ProtoMessage() {}

func (x *ScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleResponse.ProtoReflect.Descriptor instead.
func (*ScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleResponse) GetSchedule() map[string]*ScheduleTask {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ScheduleResponse) GetMakespan() int32 {
	if x != nil && x.Makespan != nil {
		return *x.Makespan
	}
	return 0
}

func (x *ScheduleResponse) GetTotalCost() float32 {
	if x != nil && x.TotalCost != nil {
		return *x.TotalCost
	}
	return 0
}

type OptimizeScheduleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *ScheduleResponse      `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptimizeScheduleResponse) Reset() {
	*x = OptimizeScheduleResponse{}
	mi := &file_pkg_pb_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptimizeScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizeScheduleResponse) ProtoMessage() {}

func (x *OptimizeScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pb_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizeScheduleResponse.ProtoReflect.Descriptor instead.
func (*OptimizeScheduleResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pb_service_proto_rawDescGZIP(), []int{13}
}

func (x *OptimizeScheduleResponse) GetResult() *ScheduleResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_pkg_pb_service_proto protoreflect.FileDescriptor

var file_pkg_pb_service_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x03, 0x0a, 0x10,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x47, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x5f, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x50, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x44, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x3d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x82, 0x02, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x73,
	0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6b,
	0x65, 0x73, 0x70, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x0d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x61, 0x6b, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x32, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_pkg_pb_service_proto_rawDescOnce sync.Once
	file_pkg_pb_service_proto_rawDescData []byte
)

func file_pkg_pb_service_proto_rawDescGZIP() []byte {
	file_pkg_pb_service_proto_rawDescOnce.Do(func() {
		file_pkg_pb_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pkg_pb_service_proto_rawDesc), len(file_pkg_pb_service_proto_rawDesc)))
	})
	return file_pkg_pb_service_proto_rawDescData
}

var file_pkg_pb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_pkg_pb_service_proto_goTypes = []any{
	(*LogisticsRequest)(nil),         // 0: pb.LogisticsRequest
	(*Resource)(nil),                 // 1: pb.Resource
	(*DemandForecast)(nil),           // 2: pb.DemandForecast
	(*ProductCapacity)(nil),          // 3: pb.ProductCapacity
	(*ProductionPlanRequest)(nil),    // 4: pb.ProductionPlanRequest
	(*ProductSchedule)(nil),          // 5: pb.ProductSchedule
	(*ScheduleEntry)(nil),            // 6: pb.ScheduleEntry
	(*MachineSchedule)(nil),          // 7: pb.MachineSchedule
	(*ProductionResponse)(nil),       // 8: pb.ProductionResponse
	(*Task)(nil),                     // 9: pb.Task
	(*TransitMap)(nil),               // 10: pb.TransitMap
	(*ScheduleTask)(nil),             // 11: pb.ScheduleTask
	(*ScheduleResponse)(nil),         // 12: pb.ScheduleResponse
	(*OptimizeScheduleResponse)(nil), // 13: pb.OptimizeScheduleResponse
	nil,                              // 14: pb.LogisticsRequest.ResourcePoolEntry
	nil,                              // 15: pb.LogisticsRequest.TransitMatrixEntry
	nil,                              // 16: pb.ProductionResponse.ScheduleEntry
	nil,                              // 17: pb.Task.ResourcesRequiredEntry
	nil,                              // 18: pb.TransitMap.TransitTimesEntry
	nil,                              // 19: pb.ScheduleTask.ResourcesEntry
	nil,                              // 20: pb.ScheduleResponse.ScheduleEntry
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
}
var file_pkg_pb_service_proto_depIdxs = []int32{
	9,  // 0: pb.LogisticsRequest.tasks:type_name -> pb.Task
	14, // 1: pb.LogisticsRequest.resource_pool:type_name -> pb.LogisticsRequest.ResourcePoolEntry
	15, // 2: pb.LogisticsRequest.transit_matrix:type_name -> pb.LogisticsRequest.TransitMatrixEntry
	21, // 3: pb.Resource.maintenance:type_name -> google.protobuf.Timestamp
	21, // 4: pb.DemandForecast.due_date:type_name -> google.protobuf.Timestamp
	2,  // 5: pb.ProductionPlanRequest.demand:type_name -> pb.DemandForecast
	1,  // 6: pb.ProductionPlanRequest.resources:type_name -> pb.Resource
	3,  // 7: pb.ProductionPlanRequest.capacity:type_name -> pb.ProductCapacity
	5,  // 8: pb.ScheduleEntry.products:type_name -> pb.ProductSchedule
	5,  // 9: pb.MachineSchedule.schedules:type_name -> pb.ProductSchedule
	16, // 10: pb.ProductionResponse.schedule:type_name -> pb.ProductionResponse.ScheduleEntry
	17, // 11: pb.Task.resources_required:type_name -> pb.Task.ResourcesRequiredEntry
	18, // 12: pb.TransitMap.transit_times:type_name -> pb.TransitMap.TransitTimesEntry
	19, // 13: pb.ScheduleTask.resources:type_name -> pb.ScheduleTask.ResourcesEntry
	20, // 14: pb.ScheduleResponse.schedule:type_name -> pb.ScheduleResponse.ScheduleEntry
	12, // 15: pb.OptimizeScheduleResponse.result:type_name -> pb.ScheduleResponse
	10, // 16: pb.LogisticsRequest.TransitMatrixEntry.value:type_name -> pb.TransitMap
	7,  // 17: pb.ProductionResponse.ScheduleEntry.value:type_name -> pb.MachineSchedule
	11, // 18: pb.ScheduleResponse.ScheduleEntry.value:type_name -> pb.ScheduleTask
	0,  // 19: pb.Scheduler.ScheduleTasks:input_type -> pb.LogisticsRequest
	4,  // 20: pb.Scheduler.GenerateProductionPlan:input_type -> pb.ProductionPlanRequest
	13, // 21: pb.Scheduler.ScheduleTasks:output_type -> pb.OptimizeScheduleResponse
	8,  // 22: pb.Scheduler.GenerateProductionPlan:output_type -> pb.ProductionResponse
	21, // [21:23] is the sub-list for method output_type
	19, // [19:21] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pkg_pb_service_proto_init() }
func file_pkg_pb_service_proto_init() {
	if File_pkg_pb_service_proto != nil {
		return
	}
	file_pkg_pb_service_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pkg_pb_service_proto_rawDesc), len(file_pkg_pb_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_pb_service_proto_goTypes,
		DependencyIndexes: file_pkg_pb_service_proto_depIdxs,
		MessageInfos:      file_pkg_pb_service_proto_msgTypes,
	}.Build()
	File_pkg_pb_service_proto = out.File
	file_pkg_pb_service_proto_goTypes = nil
	file_pkg_pb_service_proto_depIdxs = nil
}
